from aiogram import Dispatcher, types, Bot
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile, InputMediaPhoto, MediaGroup

from tg_bot.keyboards import selltypes_kb, sellcreate_iphones_kb, sellmodels_kb, sellbacktochoice_kb, choice_new_kb, memory_kb, sizes_kb, finalsell_kb, user_menu, sell_appl_acception, after_registration_user, touser_link_kb
from tg_bot.DBSM import get_services_list_for_sell, add_application_sell, get_service_info, sell_application_info, close_appl_sell, is_active_sell_appl, sell_application_full_info
from tg_bot import generate_random_string
from tg_bot.states import sell

import json, os, asyncio
from typing import List
from threading import Thread as th

def register_sell_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(process_models, text_startswith = "smdl")
    dp.register_callback_query_handler(backtomodels, text = "sellbackfrommodels")
    dp.register_callback_query_handler(backtomodels, text = "sellbackfromiphones")
    dp.register_callback_query_handler(procmodel, text_startswith ="–∏_")
    dp.register_callback_query_handler(prociphone, text_startswith = "–º_")
    dp.register_callback_query_handler(backtochoice, text = "sellbacktchs", state = sell.all_states)
    dp.register_callback_query_handler(memoryproc, state = sell.memory, text_startswith = "m_")
    dp.register_callback_query_handler(sizeproc, text_startswith = "s_", state = sell.size)
    dp.register_message_handler(handle_albums_sell, state = sell.photos, content_types= types.ContentType.ANY)
    dp.register_message_handler(proc_sost, state= sell.sost)
    dp.register_message_handler(proc_equip, state= sell.equip)
    dp.register_message_handler(proc_acum, state = sell.acum)
    dp.register_message_handler(proc_final, state = sell.final)
    dp.register_callback_query_handler(proc_choice, state = sell.final, text_startswith = "fsell_")
    dp.register_callback_query_handler(proc_decision_sell, text_startswith = "rsell_")


async def process_models(call: types.CallbackQuery, state: FSMContext):
    mdl = call.data.split("_")[1]
    if mdl == "back":
        await call.message.edit_text("–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup= choice_new_kb())
        return
    else:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –º–æ–¥–µ–ª—å –Ω–∏–∂–µ üëá", reply_markup= selltypes_kb(mdl))


async def backtomodels(call: types.CallbackQuery, state: FSMContext):
    if call.data == "sellbackfrommodels":
        await call.message.edit_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞—Ç—å/–æ–±–º–µ–Ω—è—Ç—å?", reply_markup= sellmodels_kb())
    else:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –º–æ–¥–µ–ª—å –Ω–∏–∂–µ üëá", reply_markup= selltypes_kb("iPhone"))


async def procmodel(call: types.CallbackQuery, state: FSMContext):
    gadget = call.data.split("_")[1]
    mdl_id = int(call.data.split("_")[2])
    with open("tg_bot/models.json", 'r') as file:
        data_js = json.load(file)
    if "iPhone" not in gadget:
        async with state.proxy() as data:
            data['model'] = data_js[gadget][mdl_id]
            data['gadget'] = gadget
            if gadget not in ["MacBook", "iPad"]:
                data['memory'] = "-"
                if gadget != "Apple Watch":
                    await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <i>{data_js[gadget][mdl_id]}</i> ‚úÖ\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üëá", reply_markup= sellbacktochoice_kb())
                    await sell.photos.set()
                    data['size'] = "-"
                else:
                    await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –≤–∞—à–∏—Ö —á–∞—Å–æ–≤ <i>Apple Watch</i> üëá", reply_markup= sizes_kb())
                    await sell.size.set()
            else:
                if gadget == "MacBook":
                    await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <i>{data_js[gadget][mdl_id]}</i> ‚úÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤–∞—à–µ–≥–æ <i>MacBook</i> üëá", reply_markup= memory_kb())
                else:
                    await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <i>{data_js[gadget][mdl_id]}</i> ‚úÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤–∞—à–µ–≥–æ <i>iPad</i> üëá", reply_markup= memory_kb())
                await sell.memory.set()
                data['size'] = "-"

    else:
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –º–æ–¥–µ–ª—å –Ω–∏–∂–µ üëá", reply_markup= sellcreate_iphones_kb(mdl_id))


async def prociphone(call: types.CallbackQuery, state: FSMContext):
    key = call.data.split("_")[1]
    idx = int(call.data.split("_")[2])
    with open("tg_bot/models.json", 'r') as file:
        data_js = json.load(file)
    model = data_js['iPhone'][key][idx]
    await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <i>{model}</i> ‚úÖ\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏ –≤–∞—à–µ–≥–æ <i>iPhone</i> üëá", reply_markup= memory_kb())
    await sell.memory.set()
    async with state.proxy() as data:
        data['model'] = model
        data['gadget'] = "iPhone"
        data['size'] = "-"

async def backtochoice(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if "photos_sell" in data:
            for path in data['photos_sell']:
                os.remove(path)

    await call.message.edit_text("–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø—Ä–æ–¥–∞—Ç—å/–æ–±–º–µ–Ω—è—Ç—å?", reply_markup= sellmodels_kb())
    await state.finish()


async def memoryproc(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['memory'] = call.data.split("_")[1]
        await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <i>{data['model']}</i> ‚úÖ\n–í—ã–±—Ä–∞–Ω –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏: <i>{data['memory']}</i> ‚úÖ\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üëá", reply_markup= sellbacktochoice_kb())
        await sell.photos.set()


async def sizeproc(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['size'] = call.data.split("_")[1]
        await call.message.edit_text(f"–í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: <i>{data['model']}</i> ‚úÖ\n–í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: <i>{data['size']}</i> ‚úÖ\n–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ üëá", reply_markup= sellbacktochoice_kb())
        await sell.photos.set()


async def handle_albums_sell(message: types.Message, album: List[types.Message], state: FSMContext):
    media_list = []
    for obj in album:
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id
        
        file_info = await message.bot.get_file(file_id)
        file = await message.bot.download_file(file_info.file_path)
        file_path = "tg_bot/photos/" + generate_random_string(20) + ".jpg"
        
        with open(file_path, 'wb') as f:
            f.write(file.getvalue())
        media_list.append(file_path)
        
        async with state.proxy() as data:
            data['photos_sell'] = media_list

    async with state.proxy() as data:
        await message.answer(f"–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ <i>{data['gadget']}</i> üëá", reply_markup= sellbacktochoice_kb())
        await sell.sost.set()
    

async def proc_sost(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['sost'] = message.text
        await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç —Å <i>{data['gadget']}</i> üëá", reply_markup= sellbacktochoice_kb())
        await sell.equip.set()


async def proc_equip(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['equip'] = message.text
        if data['gadget'] != "AirPods":
            await message.answer(f"–£–∫–∞–∂–∏—Ç–µ –µ–º–∫–æ—Å—Ç—å –∞–∫—É–º—É–ª—è—Ç–æ—Ä–∞ <i>{data['gadget']}</i> üëá", reply_markup= sellbacktochoice_kb())
            await sell.acum.set()
        else:
            data['acum'] = "-"
            await message.answer("–ö–∞–∫—É—é —Å—É–º–º—É –∏–ª–∏ –∫–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞ –≤–∞—à–∏ <i>AirPods</i> ?", reply_markup= sellbacktochoice_kb())
            await sell.final.set()


async def proc_acum(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['acum'] = message.text
        await message.answer(f"–ö–∞–∫—É—é —Å—É–º–º—É –∏–ª–∏ –∫–∞–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞ <i>{data['gadget']}</i> ?", reply_markup= sellbacktochoice_kb())
        await sell.final.set()


async def proc_final(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['final_sell'] = message.text
        if data['size'] != "-":
            await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>Apple Watch</i>\n–ú–æ–¥–µ–ª—å: <i>{data['model']}</i>\n\n–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: <i>{data['size']}</i>\n–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: <i>{data['acum']}</i>\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç: <i>{data['equip']}</i>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{data['sost']}</i>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <i>{message.text}</i>", reply_markup= finalsell_kb())
        else:
            if data['gadget'] == "AirPods":
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>AirPods</i>\n–ú–æ–¥–µ–ª—å: <i>{data['model']}</i>\n\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç: <i>{data['equip']}</i>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{data['sost']}</i>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <i>{message.text}</i>", reply_markup= finalsell_kb())
            else:
                await message.answer(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: <i>{data['gadget']}</i>\n–ú–æ–¥–µ–ª—å: <i>{data['model']}</i>\n\n–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: <i>{data['memory']}</i>\n–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: <i>{data['acum']}</i>\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç: <i>{data['equip']}</i>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{data['sost']}</i>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <i>{message.text}</i>", reply_markup= finalsell_kb())
    


async def proc_choice(call: types.CallbackQuery, state: FSMContext):
    action = int(call.data.split("_")[1])
    if action:
        async with state.proxy() as data:
            appl_id = await add_application_sell(call.from_user, data['model'], data['size'], data['memory'], data['equip'], data['final_sell'], data['acum'], data['sost'])
            th(target= thread_runner, args= (appl_id, )).start()
            for i in await get_services_list_for_sell(call.from_user.id):

                if len(data['photos_sell']) == 1:
                    await call.message.bot.send_photo(chat_id= i, photo= InputFile(data['photos_sell'][0]))
                else:
                    await call.message.bot.send_media_group(chat_id= i, media = [InputMediaPhoto(InputFile(path)) for path in data['photos_sell']])

                if data['size'] != "-":
                    await call.message.bot.send_message(chat_id= i, text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å <i>{data['model']}</i>\n\n–†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞: <i>{data['size']}</i>\n–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: <i>{data['acum']}</i>\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç: <i>{data['equip']}</i>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{data['sost']}</i>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <i>{data['final_sell']}</i>\n\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—ã—à–µ ‚òù", reply_markup= sell_appl_acception(appl_id))
                else:
                    if data['gadget'] == "AirPods":
                        await call.message.bot.send_message(chat_id= i, text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å <i>{data['model']}</i>\n\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç: <i>{data['equip']}</i>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{data['sost']}</i>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <i>{data['final_sell']}</i>\n\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—ã—à–µ ‚òù", reply_markup= sell_appl_acception(appl_id))
                    else:
                        await call.message.bot.send_message(chat_id= i, text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å <i>{data['model']}</i>\n\n–í—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å: <i>{data['memory']}</i>\n–û—Å—Ç–∞—Ç–æ—á–Ω–∞—è –µ–º–∫–æ—Å—Ç—å –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞: <i>{data['acum']}</i>\n–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –∫–æ–º–ø–ª–µ–∫—Ç: <i>{data['equip']}</i>\n–°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: <i>{data['sost']}</i>\n–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω–∞—è —Ü–µ–Ω–∞/—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: <i>{data['final_sell']}</i>\n\n–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª –≤—ã—à–µ ‚òù", reply_markup= sell_appl_acception(appl_id))
            
            for i, path in enumerate(data['photos_sell']):
                os.rename(path, f"tg_bot/photos/sellappl{appl_id}_{i}.jpg")
            
            await call.message.edit_text(f"–ì–æ—Ç–æ–≤–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É/–æ–±–º–µ–Ω ‚Ññ {appl_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–µ—Ä–≤–∏—Å–∞–º ‚úÖ", reply_markup= after_registration_user())
            await state.finish()

    else:
        await call.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é üëá", reply_markup= user_menu())
        
        async with state.proxy() as data:
            if "photos_sell" in data:
                for path in data['photos_sell']:
                    os.remove(path)
        
        await state.finish()
        return



async def proc_decision_sell(call: types.CallbackQuery, state: FSMContext):
    if call.data == "rsell_decl":
        
        await call.message.reply("–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–Ω–æ ‚úÖ")
    
    else:
        service_id = int(call.data.split("_")[1])
        link = (await get_service_info(service_id))[0]
        if not call.from_user.username:
            await call.message.answer("–ß—Ç–æ–±—ã –ø—Ä–∏–Ω—è—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–∏—Å–∞, –≤–∞–º –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram\n\n–≠—Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞!")
            return
        
        appl_id = int(call.message.text[call.message.text.index("‚Ññ") + 1:].strip().split()[0])
        user_id, model, price = await sell_application_info(appl_id)
        user_link = f'https://t.me/{call.from_user.username}'

        await call.message.bot.send_message(chat_id= service_id, text = f"–ó–∞—è–≤–∫–∞ ‚Ññ {appl_id}\n\n<a href = '{user_link}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –≤–∞—à–∏ —É—Å–ª–æ–≤–∏—è –ø–æ –ø—Ä–æ–¥–∞–∂–µ/–æ–±–º–µ–Ω—É <i>{model}</i> ‚úÖ", reply_markup= touser_link_kb(user_link))
    
        await close_appl_sell(appl_id, link)
          
        await call.message.reply(text = "–í–∞—à –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–µ—Ä–≤–∏—Å—É ‚úÖ")
    
    try:
        await call.message.edit_reply_markup(reply_markup= None)
    except:
        pass


async def send_push_to_admins(appl_id):
    await asyncio.sleep(21) #57601
    bot = Bot(token = "7060072417:AAEMd9zhYgaQoE_m-HldTbsSex0EvkTomNI")
    if (await is_active_sell_appl(appl_id))[1] == "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É –Ω–µ–ª—å–∑—è –ø—Ä–∏–Ω—è—Ç—å (":
        info = await sell_application_full_info(appl_id)
        text = f"–ó–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–¥–∞–∂—É/–æ–±–º–µ–Ω –Ω–µ –ø—Ä–∏–Ω—è–ª–∏ –∑–∞ 16 —á–∞—Å–æ–≤!!\n–ú–æ–¥–µ–ª—å: {info[0]}\n–ö–æ–º–ø–ª–µ–∫—Ç: {info[1]}\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {info[2]}\n–ë–∞—Ç–∞—Ä–µ—è: {info[3]}\n–ñ–µ–ª–∞–µ–º–∞—è —Ü–µ–Ω–∞: {info[4]}\n–ü–∞–º—è—Ç—å: {info[5]}\n–†–∞–∑–º–µ—Ä –¥–∏—Å–ø–ª–µ—è: {info[6]}"
        count = 1
        if not os.path.isfile(f"tg_bot/photos/sellappl{appl_id}_1.jpg"):
            await bot.send_photo(chat_id= 1441962095, photo= InputFile(f"tg_bot/photos/sellappl{appl_id}_0.jpg"), caption = text)
        else:
            group = MediaGroup()
            while os.path.isfile(f"tg_bot/photos/sellappl{appl_id}_{count}.jpg"):

                group.attach_photo(InputFile(f"tg_bot/photos/sellappl{appl_id}_{count}.jpg"))
                count += 1

            await bot.send_media_group(chat_id= 1441962095, text = text)
        
    count = 0
    while os.path.isfile(f"tg_bot/photos/sellappl{appl_id}_{count}.jpg"):
        os.remove(f"tg_bot/photos/sellappl{appl_id}_{count}.jpg")
        count += 1

def thread_runner(appl_id):
    asyncio.run(send_push_to_admins(appl_id))