from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile

from tg_bot.DBSM import process_application, add_new_city, all_user_for_rass, namecheck, block, add_service, all_applications_for_review, adminpanel_stat, remont_stat, sell_stat, get_sub_price, change_sub_price
from tg_bot.keyboards import admin_citychoice, tomenu_admin, admin_menu, choice_blok_admin, final_blok_admin, admin_excel_choice, admin_stat_choice, backtostat, adminsub_kb
from tg_bot import generate_random_string
from tg_bot.states import admin

from openpyxl import Workbook
from openpyxl.styles import Font
import pytz, os
from datetime import datetime

def register_admin_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(process_appl, text_startswith = "appl")
    dp.register_message_handler(reason_decline_application, state = admin.appl_reason)
    dp.register_message_handler(service_link, state = admin.service_link)
    dp.register_callback_query_handler(process_mainmenu, text_startswith = "startadmin")
    dp.register_callback_query_handler(process_excel, text_startswith = "excel")
    dp.register_callback_query_handler(process_stat, text_startswith = "stat")
    dp.register_message_handler(process_city, state = admin.city)
    dp.register_message_handler(process_subprice, state = admin.sub_price)
    dp.register_callback_query_handler(citychoice, state = admin.choice_city, text_startswith = "cchoice")
    dp.register_callback_query_handler(proc_blockchoice, state = admin.blok_choice, text_startswith = "block")
    dp.register_message_handler(proc_blockname, state = admin.block_name)
    dp.register_callback_query_handler(proc_blockfinish, state = admin.block_finish, text_startswith = "toblock")
    dp.register_message_handler(proc_blockreason, state = admin.block_reason)
    dp.register_message_handler(procrass, state = admin.rass_text, content_types= types.ContentType.ANY)


async def process_appl(call: types.CallbackQuery, state: FSMContext):
    is_accept = bool(int(call.data.split("_")[1]))
    appl_id = int(call.data.split("_")[2])
    user_id = await process_application(appl_id, is_accept)
    if not is_accept:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞—è–≤–∫–∏ üëá")
        await admin.appl_reason.set()
        async with state.proxy() as data:
            data['user_id'] = user_id
    else:
        await call.message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–°–µ—Ä–≤–∏—Å, –ø–æ–¥–∞–≤—à–∏–π –∑–∞—è–≤–∫—É, —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ–± —ç—Ç–æ–º üí¨")
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª–µ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ üëá")
        await call.message.bot.send_message(chat_id= user_id, text = "–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚úÖ")
        await admin.service_link.set()
        async with state.proxy() as data:
            data['appl_id'] = appl_id


async def reason_decline_application(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await message.bot.send_message(chat_id= data['user_id'], text = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à—É –∑–∞—è–≤–∫—É –Ω–µ –æ–¥–æ–±—Ä–∏–ª–∏ ‚ùå\n–ü—Ä–∏—á–∏–Ω–∞: <i>{message.text}</i>")
    await message.answer("–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚úÖ\n–°–µ—Ä–≤–∏—Å, –ø–æ–¥–∞–≤—à–∏–π –∑–∞—è–≤–∫—É, —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω –æ –ø—Ä–∏—á–∏–Ω–µ üí¨")
    await state.finish()


async def service_link(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        await add_service(data['appl_id'], message.text)
    await message.answer("–°—Å—ã–ª–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ –∑–∞ —Å–µ—Ä–≤–∏—Å–æ–º")
    await state.finish()





async def process_mainmenu(call: types.CallbackQuery, state: FSMContext):
    action = call.data.split("_")[1]
    if action == "city":
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
        await admin.city.set()
    
    elif action == "tomenu":
        await call.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup= admin_menu())

    elif action == "rass":
        await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞–∑–æ—Å–ª–∞—Ç—å –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º üëá")
        await admin.rass_text.set()

    elif action == "blok":
        await call.message.answer("–ö–æ–≥–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ?", reply_markup= choice_blok_admin())
        await admin.blok_choice.set()
    
    elif action == "appl":
        await call.message.edit_text("–ö–∞–∫–∏–µ –∑–∞—è–≤–∫–∏ –≤–∞–º –Ω—É–∂–Ω—ã?", reply_markup= admin_excel_choice())

    elif action == "stat":
        await call.message.edit_text("–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", reply_markup= admin_stat_choice())

    elif action == "sub":
        price, price_user = await get_sub_price()
        if not price:
            price = "-"
        else:
            price = f"{price.value} ‚ÇΩ"
        if not price_user:
            price_user = "-"
        else:
            price_user = f"{price_user.value} ‚ÇΩ"
        await call.message.edit_text(f"–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤ - <i>{price}</i>\n–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π - <i>{price_user}</i>\n\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏?", reply_markup= adminsub_kb())
    
    elif action in ("change1", "change0"):
        await admin.sub_price.set()
        async with state.proxy() as data:
            data['is_service'] = int(call.data[-1])
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ üëá")



async def process_subprice(message: types.Message, state: FSMContext):
    try:
        if int(message.text) <= 0:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
            return
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞—Ç—É—Ä–∞–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º –±–µ–∑ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤")
        return
    
    async with state.proxy() as data:
        is_serv = data['is_service']
        await change_sub_price(is_serv, int(message.text))
    await message.answer(text = "–¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∞", reply_markup= tomenu_admin())
    await state.finish()


async def process_excel(call: types.CallbackQuery, state: FSMContext):
    action = int(call.data.split("_")[1])
    now_date = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%d.%m.%Y')

    if action: 
        file_name =  await generate_remont_table()
        await call.message.answer_document(document= InputFile(file_name, f"–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ —Ä–µ–º–æ–Ω—Ç {now_date}.xlsx"))
        os.remove(file_name)
        file_name =await generate_sell_table()
        await call.message.answer_document(document= InputFile(file_name, f"–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É_–æ–±–º–µ–Ω {now_date}.xlsx"))
        os.remove(file_name)
    else:
        file_name = await generate_applications_table()
        await call.message.answer_document(document= InputFile(file_name, f"–û—Ç—á–µ—Ç –ø–æ –∑–∞—è–≤–∫–∞–º –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é {now_date}.xlsx"))
        os.remove(file_name)

async def process_stat(call: types.CallbackQuery, state: FSMContext):
    if call.data == "stat_back":
        await call.message.edit_text("–ó–∞ –∫–∞–∫–æ–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?", reply_markup= admin_stat_choice())
        return
        
    method = call.data.split("_")[1]
    methods_js = {"month": "–∑–∞ –º–µ—Å—è—Ü", "week": "–∑–∞ –Ω–µ–¥–µ–ª—é", "day": "–∑–∞ –¥–µ–Ω—å", "all": "–∑–∞ –≤—Å–µ –≤—Ä–µ–º—è"}
    res = await adminpanel_stat(method)
    await call.message.edit_text(text = f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {methods_js[method]}:\n\n–ö–æ–ª-–≤–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {res['count']}\n–ö–æ–ª-–≤–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {res['closed_count']}\n–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ —Ä–µ–º–æ–Ω—Ç: {res['count_remont']}\n–ö–æ–ª-–≤–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–π –Ω–∞ –ø—Ä–æ–¥–∞–∂—É/–æ–±–º–µ–Ω: {res['count_sell']}\n–°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π —Ç–æ–≤–∞—Ä(—ã): <i>{res['most_common']}</i>", reply_markup= backtostat())


async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = message.text
    await message.answer(f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≥–æ—Ä–æ–¥ {message.text}", reply_markup= admin_citychoice())
    await admin.choice_city.set()


async def citychoice(call: types.CallbackQuery, state: FSMContext):
    is_go  = bool(int(call.data.split("_")[1]))
    if not is_go:
        await state.finish()
        await call.message.answer("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup= tomenu_admin())
    else:
        async with state.proxy() as data:
            await add_new_city(data['city'])
        await call.message.answer("–ì–æ—Ä–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω ‚úÖ", reply_markup= tomenu_admin())
        await state.finish()


async def procrass(message: types.Message, state: FSMContext):
    count = 0
    for i in await all_user_for_rass():
        try:
            await message.send_copy(chat_id= i)
            count += 1
        except:
            pass

    def get_message_form(n):
        if 11 <= n % 100 <= 19:
            return "—Å–æ–æ–±—â–µ–Ω–∏–π"
        elif n % 10 == 1:
            return "—Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif 2 <= n % 10 <= 4:
            return "—Å–æ–æ–±—â–µ–Ω–∏—è"
        else:
            return "—Å–æ–æ–±—â–µ–Ω–∏–π"
        
    await message.answer(f"–†–∞–∑–æ—Å–ª–∞–Ω–æ {count} {get_message_form(count)}", reply_markup= tomenu_admin())
    await state.finish()


async def proc_blockchoice(call: types.CallbackQuery, state: FSMContext):
    action = int(call.data.split("_")[1])
    if not action:
        await call.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup= admin_menu())
        await state.finish()
        return
    
    async with state.proxy() as data:
        data['is_service_block'] = action == 1
    await admin.block_name.set()
    if action == 1:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º —Å–µ—Ä–≤–∏—Å–∞ –≤ Telegram")
    else:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram")


async def proc_blockname(message: types.Message, state: FSMContext):
    if message.text == "/start":
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup= admin_menu())
        await state.finish()
        return

    async with state.proxy() as data:
        if not await namecheck(message.text.replace("@", ""), data['is_service_block']):
            if data['is_service_block']:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ—Ä–≤–∏—Å–∞ —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ üëá")
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º —é–∑–µ—Ä–Ω–µ–π–º–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ üëá")
            return
        data['username'] = message.text.replace("@", "")
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup= final_blok_admin())
    await admin.block_finish.set()


async def proc_blockfinish(call: types.CallbackQuery, state: FSMContext):
    action = int(call.data.split("_")[1])
    if not action:
        await call.message.edit_text("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup= admin_menu())
        await state.finish()
        return

    async with state.proxy() as data:
        user_id = await block(data['username'], data['is_service_block'], action == 1)
        data['block_id'] = user_id
        data['is_block'] = action == 1
        await admin.block_reason.set()
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏") if action == 1 else await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏")


async def proc_blockreason(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if data['is_block']:
            await message.bot.send_message(chat_id= data['block_id'], text = f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚ùå\n–ü—Ä–∏—á–∏–Ω–∞ : <i>{message.text}</i>")
            if data['is_service_block']:
                await message.answer(f"–ì–æ—Ç–æ–≤–æ! –°–µ—Ä–≤–∏—Å @{data['username']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", reply_markup= tomenu_admin())
            else:
                await message.answer(f"–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{data['username']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚ùå", reply_markup= tomenu_admin())

        else:
            await message.bot.send_message(chat_id= data['block_id'], text = f"–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—à–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º ‚úÖ\n–ü—Ä–∏—á–∏–Ω–∞ : <i>{message.text}</i>")
            if data['is_service_block']:
                await message.answer(f"–ì–æ—Ç–æ–≤–æ! –°–µ—Ä–≤–∏—Å @{data['username']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", reply_markup= tomenu_admin())
            else:
                await message.answer(f"–ì–æ—Ç–æ–≤–æ! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{data['username']} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω ‚úÖ", reply_markup= tomenu_admin())
    await state.finish()
        


async def generate_applications_table():
    wb = Workbook()
    wb.remove(wb["Sheet"])
    sheet = wb.create_sheet("–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", 0)
    sheet["A1"] = "–Æ–∑–µ—Ä–Ω–µ–π–º"
    sheet['A1'].font = Font(color="FF0000")  
    sheet["B1"] = "–ù–∞–∑–≤–∞–Ω–∏–µ"
    sheet['B1'].font = Font(color="FF0000")  
    sheet["C1"] = "–ì–æ—Ä–æ–¥"
    sheet['C1'].font = Font(color="FF0000")  
    sheet["D1"] = "–ê–¥—Ä–µ—Å"
    sheet['D1'].font = Font(color="FF0000")  
    sheet["E1"] = "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
    sheet['E1'].font = Font(color="FF0000")  
    sheet["F1"] = "–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è"
    sheet['F1'].font = Font(color="FF0000")  
    sheet["G1"] = "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã"
    sheet['G1'].font = Font(color="FF0000")  
    sheet["H1"] = "–ü—Ä–∏–Ω—è—Ç–∞ –ª–∏ –∑–∞—è–≤–∫–∞"
    sheet['H1'].font = Font(color="FF0000")  
    data = await all_applications_for_review()
    for i in range(len(data)):
        sheet[f"A{i+2}"] = f"@{data[i].username}" if data[i].username is not None else "-"
        sheet[f"B{i+2}"] = data[i].name
        sheet[f"C{i+2}"] = data[i].city
        sheet[f"D{i+2}"] = data[i].adress
        sheet[f"E{i+2}"] = data[i].contacts
        sheet[f"F{i+2}"] = ", ".join(data[i].activity) if len(data[i].activity) != 1 else data[i].activity[0]
        sheet[f"G{i+2}"] = data[i].worktime
        sheet[f"H{i+2}"] = ("‚úÖ" if data[i].accepted else "‚ùå") if data[i].accepted is not None else "‚ùì"
    name = "tg_bot/documents/" + generate_random_string(20) + ".xlsx"
    wb.save(name)
    return name 


async def generate_remont_table():
    wb = Workbook()
    wb.remove(wb["Sheet"])
    sheet = wb.create_sheet("–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", 0)
    sheet["A1"] = "–Æ–∑–µ—Ä–Ω–µ–π–º"
    sheet['A1'].font = Font(color="FF0000")  
    sheet["B1"] = "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    sheet['B1'].font = Font(color="FF0000")  
    sheet["C1"] = "–û–ø–∏—Å–∞–Ω–∏–µ"
    sheet['C1'].font = Font(color="FF0000")  
    sheet["D1"] = "–ú–æ–¥–µ–ª—å"
    sheet['D1'].font = Font(color="FF0000")  
    sheet["E1"] = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    sheet['E1'].font = Font(color="FF0000")  
    sheet["F1"] = "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
    sheet['F1'].font = Font(color="FF0000")  
    sheet["G1"] = "–°–µ—Ä–≤–∏—Å"
    sheet['G1'].font = Font(color="FF0000")  
    data = await remont_stat()
    for i in range(len(data)):
        sheet[f"A{i+2}"] = f"@{data[i].username}" if data[i].username else "-"
        sheet[f"B{i+2}"] = datetime.strftime(data[i].date_add, '%d.%m.%Y %H:%M')
        sheet[f"C{i+2}"] = data[i].description
        sheet[f"D{i+2}"] = data[i].model
        sheet[f"E{i+2}"] = "‚úÖ" if data[i].closed else "‚ùå"
        sheet[f"F{i+2}"] = data[i].date_close if data[i].date_close else "-"
        sheet[f"G{i+2}"] = data[i].closed_with_service if data[i].closed_with_service else "-"
    name = "tg_bot/documents/" + generate_random_string(20) + ".xlsx"
    wb.save(name)
    return name



async def generate_sell_table():
    wb = Workbook()
    wb.remove(wb["Sheet"])
    sheet = wb.create_sheet("–ó–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç", 0)
    sheet["A1"] = "–Æ–∑–µ—Ä–Ω–µ–π–º"
    sheet['A1'].font = Font(color="FF0000")  
    sheet["B1"] = "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    sheet['B1'].font = Font(color="FF0000")  
    sheet["C1"] = "–ú–æ–¥–µ–ª—å"
    sheet["C1"].font = Font(color="FF0000")  
    sheet["D1"] = "–ö–æ–º–ø–ª–µ–∫—Ç"
    sheet['D1'].font = Font(color="FF0000")  
    sheet["E1"] = "–°–æ—Å—Ç–æ—è–Ω–∏–µ"
    sheet['E1'].font = Font(color="FF0000")  
    sheet["F1"] = "–ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä"
    sheet['F1'].font = Font(color="FF0000")  
    sheet["G1"] = "–ü–∞–º—è—Ç—å"
    sheet['G1'].font = Font(color="FF0000")  
    sheet["H1"] = "–†–∞–∑–º–µ—Ä –¥–∏—Å–ø–ª–µ—è"
    sheet['H1'].font = Font(color="FF0000")
    sheet["I1"] = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    sheet['I1'].font = Font(color="FF0000")  
    sheet["J1"] = "–î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
    sheet['J1'].font = Font(color="FF0000")  
    sheet["K1"] = "–°–µ—Ä–≤–∏—Å"
    sheet['K1'].font = Font(color="FF0000")  
   
    data = await sell_stat()
    for i in range(len(data)):
        sheet[f"A{i+2}"] = f"@{data[i].username}" if data[i].username else "-"
        sheet[f"B{i+2}"] = datetime.strftime(data[i].date_add, '%d.%m.%Y %H:%M')
        sheet[f"C{i+2}"] = data[i].model
        sheet[f"D{i+2}"] = data[i].equipment
        sheet[f"E{i+2}"] = data[i].condition
        sheet[f"F{i+2}"] = data[i].battery
        sheet[f"G{i+2}"] = data[i].memory
        sheet[f"H{i+2}"] = data[i].display_size
        sheet[f"I{i+2}"] = "‚úÖ" if data[i].closed else "‚ùå"
        sheet[f"J{i+2}"] = data[i].date_close if data[i].date_close else "-"
        sheet[f"K{i+2}"] = data[i].closed_with_service if data[i].closed_with_service else "-"
    
    name = "tg_bot/documents/" + generate_random_string(20) + ".xlsx"
    wb.save(name)
    return name

        
        
        



