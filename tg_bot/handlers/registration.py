from aiogram import Dispatcher, types
from aiogram.dispatcher import FSMContext
from aiogram.types import ContentType, InputFile, InputMediaPhoto

from tg_bot.keyboards import startaregister_kb, cities_kb, chem_zanimaetsya_kb, final_kb, accept_kb, user_menu, after_registration_user, subscription_keyboard, decline_appl_kb, admin_menu, final_appl_kb, sellbacktochoice_kb
from tg_bot.DBSM import add_user, add_service_application, who_is_user
from tg_bot import generate_random_string
from tg_bot.states import registration, user, sell

import os
from typing import List


admin_ids = [1261888898]


def register_registration_handlers(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands=["start"], state = [None, sell.size, sell.photos, sell.memory, user.desc])
    dp.register_callback_query_handler(decline, state = registration.all_states, text = "decline")
    dp.register_callback_query_handler(step1, text_startswith = "step1")
    dp.register_message_handler(name, state = registration.name)
    dp.register_callback_query_handler(city, state = registration.city, text_startswith = "city")
    dp.register_message_handler(adress, state = registration. adress)
    dp.register_message_handler(handle_albums, state = registration.photo, content_types= ContentType.ANY)
    dp.register_errors_handler(photo, exception= TypeError)
    dp.register_message_handler(contacts, state = registration.contacts)
    dp.register_callback_query_handler(chem, state = registration.chem, text_startswith = "chem")
    dp.register_message_handler(time, state = registration.time)
    dp.register_callback_query_handler(final, state = registration.send, text = "send")


async def cmd_start(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if "photos_sell" in data:
            for path in data['photos_sell']:
                os.remove(path)

    await state.finish()
    if message.from_user.id in admin_ids: #–µ—Å–ª–∏ –∞–¥–º–∏–Ω
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å üëá", reply_markup= admin_menu())
        return
    
    user_data = await who_is_user(message.from_user.id)
    who = user_data[0]
    is_sub =  user_data[1]
    is_active = user_data[2]
    
    if not who: # –µ—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ
        await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ö—Ç–æ –≤—ã? üëá", reply_markup= startaregister_kb())
        
    elif who == "user": # –µ—Å–ª–∏ —é–∑–µ—Ä 
        if is_active:
            await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª üëá", reply_markup= user_menu())
        else:
            await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—à–∏–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ‚ùå")
    
    elif who == "service": #–µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å
        if is_active:
            if is_sub:
                await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–µ/–æ–±–º–µ–Ω—É –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ‚úÖ")
            else:
                await message.answer("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, –∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∑–∞—è–≤–∫–∏ –ø–æ –ø—Ä–æ–¥–∞–∂–µ/–æ–±–º–µ–Ω—É –∏–ª–∏ —Ä–µ–º–æ–Ω—Ç—É —Ç–µ—Ö–Ω–∏–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞ ‚ùå\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá", reply_markup= subscription_keyboard())
        else:
            await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞—à–∏–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏ ‚ùå")
    
    
    else: #–µ—Å–ª–∏ –ø–æ–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤\n\n–Ø –æ–ø–æ–≤–µ—â—É –≤–∞—Å —Å—Ä–∞–∑—É –∂–µ, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ üîî")


async def step1(call: types.CallbackQuery, state: FSMContext):
    is_service = not bool(int(call.data.split("_")[1]))
    async with state.proxy() as data:
        data["is_service"] = is_service
    if is_service:
        await call.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ üëá", reply_markup= decline_appl_kb())
    else:
        await call.message.answer("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ —Å–µ–±–µ –Ω–∏–∫–Ω–µ–π–º üëá", reply_markup= decline_appl_kb())
    await registration.name.set()


async def name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["name"] = message.text
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –∏–∑ —Å–ø–∏—Å–∫–∞ üëá", reply_markup= await cities_kb())
    await registration.city.set()


async def city(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data["city"] = call.data.split("_")[1]
        if not data["is_service"]:
            await add_user(call.from_user, data['name'], data['city'])
            await call.message.answer(f'–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, {data["name"]}! –í—ã –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.', reply_markup= after_registration_user())
            await state.finish()
            return
    await registration.adress.set()
    await call.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ üëá", reply_markup= decline_appl_kb())


async def adress(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['adress'] = message.text
    
    await registration.photo.set()
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ üëá\n\n<i>*–ó–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞—à –ª–æ–≥–æ—Ç–∏–ø, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è —Å —É–ª–∏—Ü—ã –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –ø–æ–º–µ—â–µ–Ω–∏—è</i>", reply_markup= decline_appl_kb())


async def photo(update: types.Update, error: TypeError): 
    if str(error) == "handle_albums() missing 1 required positional argument: 'album'":
        dp = update.message.bot['dp']
        state = dp.current_state(chat=update.message.chat.id, user=update.message.from_user.id)
        current_state = await state.get_state()
        if current_state != registration.photo.state:
            return
        message = update.message
        photo = message.photo[-1]
        
        file_info = await message.bot.get_file(photo.file_id)
        file = await message.bot.download_file(file_info.file_path)

        file_path = "tg_bot/photos/" + generate_random_string(20) + ".jpg"
        with open(file_path, 'wb') as f:
            f.write(file.getvalue())

        async with state.proxy() as data:
            data['photos'] = [file_path]

        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è üëá\n\n<i>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç –≤–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>", reply_markup= decline_appl_kb())
        await registration.contacts.set()


    elif str(error) == "handle_albums_remont() missing 1 required positional argument: 'album'":
        dp = update.message.bot['dp']
        state = dp.current_state(chat=update.message.chat.id, user=update.message.from_user.id)
        current_state = await state.get_state()
        if current_state != user.photos.state:
            return
        
        message = update.message
        photo = message.photo[-1]
        
        file_info = await message.bot.get_file(photo.file_id)
        file = await message.bot.download_file(file_info.file_path)

        file_path = "tg_bot/photos/" + generate_random_string(20) + ".jpg"
        with open(file_path, 'wb') as f:
            f.write(file.getvalue())

        async with state.proxy() as data:
            data['photos_remont'] = [file_path]

            await message.answer(f"–ú–æ–¥–µ–ª—å: <i>{data['selected_model']}</i>\n–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã: <i>{data['desc']}</i>", reply_markup= final_appl_kb())
            await user.final.set()

    elif str(error) == "handle_albums_sell() missing 1 required positional argument: 'album'":
        dp = update.message.bot['dp']
        state = dp.current_state(chat=update.message.chat.id, user=update.message.from_user.id)
        current_state = await state.get_state()
        if current_state != sell.photos.state:
            return
        
        message = update.message
        photo = message.photo[-1]
        
        file_info = await message.bot.get_file(photo.file_id)
        file = await message.bot.download_file(file_info.file_path)

        file_path = "tg_bot/photos/" + generate_random_string(20) + ".jpg"
        with open(file_path, 'wb') as f:
            f.write(file.getvalue())

        async with state.proxy() as data:
            data['photos_sell'] = [file_path]
            await message.answer(f"–û–ø–∏—à–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ <i>{data['gadget']}</i> üëá", reply_markup= sellbacktochoice_kb())
            await sell.sost.set()





async def handle_albums(message: types.Message, album: List[types.Message], state: FSMContext):
    media_list = []
    for obj in album:
        if obj.photo:
            file_id = obj.photo[-1].file_id
        else:
            file_id = obj[obj.content_type].file_id
        
        file_info = await message.bot.get_file(file_id)
        file = await message.bot.download_file(file_info.file_path)
        file_path = "tg_bot/photos/" + generate_random_string(20) + ".jpg"
        
        with open(file_path, 'wb') as f:
            f.write(file.getvalue())
        media_list.append(file_path)
        
        async with state.proxy() as data:
            data['photos'] = media_list
    
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Å –≤–∞–º–∏ –º–æ–∂–Ω–æ —Å–≤—è–∑–∞—Ç—å—Å—è üëá\n\n<i>–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ç–µ–ª–µ–≥—Ä–∞–º-–∞–∫–∫–∞—É–Ω—Ç –≤–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</i>", reply_markup= decline_appl_kb())
    await registration.contacts.set()





async def contacts(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["contacts"] = message.text
    await message.answer("–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è –≤–∞—à —Å–µ—Ä–≤–∏—Å?", reply_markup= chem_zanimaetsya_kb())
    await registration.chem.set()


async def chem(call: types.CallbackQuery, state: FSMContext):
    chem_list = call.data.split("_")[1].split(",")
    async with state.proxy() as data:
        for i in range(len(chem_list)):
            if not chem_list[i]:
                chem_list.pop(i)
        data['chem'] = chem_list
    await registration.time.set()
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ —á–∞—Å—ã —Ä–∞–±–æ—Ç—ã üëá", reply_markup= decline_appl_kb())


async def time(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['time'] = message.text
        zanyatia = ", ".join(data['chem'])
        await message.answer(f"–û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–∞—à–µ–π –∑–∞—è–≤–∫–æ–π:\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞</b>: <i>{data['name']}</i>\n<b>–ì–æ—Ä–æ–¥</b>: <i>{data['city']}</i>\n<b>–ê–¥—Ä–µ—Å</b>: <i>{data['adress']}</i>\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>: <i>{data['contacts']}</i>\n<b>–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è</b>: <i>{zanyatia}</i>\n<b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</b>: <i>{message.text}</i>\n\n–ï—Å–ª–∏ –≤—Å–µ –≤–µ—Ä–Ω–æ, –æ–Ω–∞ –±—É–¥–µ—Ç <i>–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>.", reply_markup= final_kb())
        await registration.send.set()

async def decline(call: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        if "photos" in data:
            for path in data['photos']:
                os.remove(path)

    await state.finish()

    await call.message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ ‚ùå\n–ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –≤–≤–µ–¥–∏—Ç–µ <i>/start</i> üëá")


async def final(call: types.CallbackQuery, state: FSMContext):
    await call.message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–∏–º–µ—Ç —Ä–µ—à–µ–Ω–∏–µ, –≤–∞–º –ø—Ä–∏–¥—ë—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî\n–û–∂–∏–¥–∞–π—Ç–µ... ‚è≥")
    async with state.proxy() as data:
        application_id = await add_service_application(call.from_user, data['name'], data['city'], data['adress'], data['contacts'], data['chem'], data['time'])
        for i in admin_ids:
            if len(data['photos']) == 1:
                await call.message.bot.send_photo(chat_id= i, photo = InputFile(data['photos'][0]))
            else:
                await call.message.bot.send_media_group(chat_id=i, media = [InputMediaPhoto(InputFile(path)) for path in data['photos']])
            zanyatia = ", ".join(data['chem'])
            await call.message.bot.send_message(chat_id= i, text = f"–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞: <b>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞</b>: <i>{data['name']}</i>\n<b>–ì–æ—Ä–æ–¥</b>: <i>{data['city']}</i>\n<b>–ê–¥—Ä–µ—Å</b>: <i>{data['adress']}</i>\n<b>–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</b>: <i>{data['contacts']}</i>\n<b>–ß–µ–º –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è</b>: <i>{zanyatia}</i>\n<b>–ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã</b>: <i>{data['time']}</i>\n\n–û—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —Å–µ—Ä–≤–∏—Å–∞ –≤—ã—à–µ ‚òùÔ∏è", reply_markup=accept_kb(application_id))
        for j in data['photos']:
            os.remove(j)
    await state.finish()


            


